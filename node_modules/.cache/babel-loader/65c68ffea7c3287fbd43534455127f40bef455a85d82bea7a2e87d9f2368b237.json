{"ast":null,"code":"import { configureStore as createToolkitStore } from '@reduxjs/toolkit';\nimport createSagaMiddleware from 'redux-saga';\nimport rootReducer from '../Reducers';\nimport rootSaga from '../Sagas';\nconst configureStore = () => {\n  const sagaMiddleware = createSagaMiddleware();\n  const store = createToolkitStore({\n    reducer: rootReducer,\n    middleware: getDefaultMiddleware => getDefaultMiddleware().concat(sagaMiddleware),\n    devTools: true\n  });\n  sagaMiddleware.run(rootSaga);\n  return store;\n};\nexport default configureStore;","map":{"version":3,"names":["configureStore","createToolkitStore","createSagaMiddleware","rootReducer","rootSaga","sagaMiddleware","store","reducer","middleware","getDefaultMiddleware","concat","devTools","run"],"sources":["/Users/digitalfortress/Downloads/clone3/app/src/redux/Store/index.js"],"sourcesContent":["import { configureStore as createToolkitStore } from '@reduxjs/toolkit';\nimport createSagaMiddleware from 'redux-saga';\nimport rootReducer from '../Reducers';\nimport rootSaga from '../Sagas';\n\nconst configureStore = () => {\n  const sagaMiddleware = createSagaMiddleware();\n\n  const store = createToolkitStore({\n    reducer: rootReducer,\n    middleware: (getDefaultMiddleware) => \n      getDefaultMiddleware().concat(sagaMiddleware),\n    devTools: true,\n  });\n\n  sagaMiddleware.run(rootSaga);\n\n  return store;\n};\n\nexport default configureStore;\n"],"mappings":"AAAA,SAASA,cAAc,IAAIC,kBAAkB,QAAQ,kBAAkB;AACvE,OAAOC,oBAAoB,MAAM,YAAY;AAC7C,OAAOC,WAAW,MAAM,aAAa;AACrC,OAAOC,QAAQ,MAAM,UAAU;AAE/B,MAAMJ,cAAc,GAAGA,CAAA,KAAM;EAC3B,MAAMK,cAAc,GAAGH,oBAAoB,CAAC,CAAC;EAE7C,MAAMI,KAAK,GAAGL,kBAAkB,CAAC;IAC/BM,OAAO,EAAEJ,WAAW;IACpBK,UAAU,EAAGC,oBAAoB,IAC/BA,oBAAoB,CAAC,CAAC,CAACC,MAAM,CAACL,cAAc,CAAC;IAC/CM,QAAQ,EAAE;EACZ,CAAC,CAAC;EAEFN,cAAc,CAACO,GAAG,CAACR,QAAQ,CAAC;EAE5B,OAAOE,KAAK;AACd,CAAC;AAED,eAAeN,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}